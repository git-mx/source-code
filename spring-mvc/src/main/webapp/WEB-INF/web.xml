<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >
<!--将程序部署到tomcat中后，tomcat容器回来获取该文件-->
<!--1-->
<!--首先，对于一个web应用，其部署在web容器中，web容器提供其一个全局的上下文环境，这个上下文就是ServletContext，其为后面的spring IoC容器提供宿主环境；-->
<!--2-->
<!--其次，在web.xml中会提供有contextLoaderListener。在web(例如tomcat)容器启动时，会触发容器初始化事件，此时contextLoaderListener会监听到这个事件，
    其contextInitialized方法会被调用，在这个方法中，spring会初始化一个启动上下文，这个上下文被称为根上下文，即WebApplicationContext，这是一个接口类，
    确切的说，其实际的实现类是XmlWebApplicationContext。这个就是spring的IoC容器，其对应的Bean定义的配置由web.xml中的context-param标签指定。
    在这个IoC容器初始化完毕后，spring以WebApplicationContext.ROOTWEBAPPLICATIONCONTEXTATTRIBUTE为属性Key，将其存储到ServletContext中，便于获取；-->
    <!--3-->
    <!--再次，contextLoaderListener监听器初始化完毕后，开始初始化web.xml中配置的Servlet，这个servlet可以配置多个，以最常见的DispatcherServlet为例，
    这个servlet实际上是一个标准的前端控制器，用以转发、匹配、处理每个servlet请求。DispatcherServlet上下文在初始化的时候会建立自己的IoC上下文，
    用以持有spring mvc相关的bean。在建立DispatcherServlet自己的IoC上下文时，会利用WebApplicationContext.ROOTWEBAPPLICATIONCONTEXTATTRIBUTE
    先从ServletContext中获取之前的根上下文(即WebApplicationContext)作为自己上下文的parent上下文。有了这个parent上下文之后，再初始化自己持有的上下文。
    这个DispatcherServlet初始化自己上下文的工作在其initStrategies方法中可以看到，大概的工作就是初始化处理器映射、视图解析等。
    这个servlet自己持有的上下文默认实现类也是mlWebApplicationContext。初始化完毕后，spring以与servlet的名字相关(此处不是简单的以servlet名为Key，
    而是通过一些转换，具体可自行查看源码)的属性为属性Key，也将其存到ServletContext中，以便后续使用。这样每个servlet就持有自己的上下文，即拥有自己独立的bean空间，
    同时各个servlet共享相同的bean，即根上下文(第2步中初始化的上下文)定义的那些bean。
-->
<web-app>
  <display-name>Archetype Created Web Application</display-name>
  <!--指定Spring根上下文要加载的类，即Spring的IOC容器需要加载的类，在该容器内加载的类能被整个应用程序使用-->
  <!--一般的单独的基于SpringMVC的web项目不需要以下两个配置，直接配置<servlet>即可-->
  <context-param>
    <param-name>rootContext</param-name>
    <param-value>classpath:applicationContext.xml</param-value>
  </context-param>
  <!--启动监听器，监听tomcat容器的初始化事件，监听到该事件后，ContextLoaderListener的contextInitialized方法会被调用，在该方法里会初始化一个Spring-->
  <!--全局上下文，根上下文WebApplicationContext。这个上下文就是Spring的IOC容器。-->
  <!--值得注意的是，这个<listener>标签必须要写在<context-param>标签之后，否则要报错，另外，这个<listener>标签可以不写，如果不写的话默认就采用的是-->
  <!--org.springframework.web.context.ContextLoaderListener这个监听器-->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <!--contextLoaderListener监听器初始化完毕后，开始初始化web.xml中配置的Servlet，这个servlet可以配置多个，比如最常见的DispatcherServlet，
    这个servlet实际上是一个标准的前端控制器，用以转发、匹配、处理每个servlet请求。DispatcherServlet上下文在初始化的时候会建立自己的IoC上下文，
    用以持有SpringMVC相关的bean。在建立DispatcherServlet自己的IOC上下文时，会利用WebApplicationContext.ROOTWEBAPPLICATIONCONTEXTATTRIBUTE
    先从ServletContext中获取之前的根上下文(即WebApplicationContext)作为自己上下文的parent上下文。有了这个parent上下文之后，再初始化自己持有的上下文。
    这个DispatcherServlet初始化自己上下文的工作在其initStrategies方法中可以看到，大概的工作就是初始化处理器映射、视图解析等。
    这个servlet自己持有的上下文默认实现类也是XmlWebApplicationContext。初始化完毕后，spring以与servlet的名字相关(此处不是简单的以servlet名为Key，
    而是通过一些转换)的属性为属性Key，也将其存到ServletContext中，以便后续使用。这样每个servlet就持有自己的上下文，即拥有自己独立的bean空间，
    同时各个servlet共享相同的bean，即根上下文(第2步中初始化的上下文)定义的那些bean。
  -->
  <!--我们可以定义多个spring-mvc.xml和多个servlet用以配置不同的SpringMVC-->
  <servlet>
    <servlet-name>SpringMVC</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring-mvc.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>SpringMVC</servlet-name>
    <url-pattern>/</url-pattern>
  </servlet-mapping>
</web-app>
